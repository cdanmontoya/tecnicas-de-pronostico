mod.exponencial_cuadratico <- lm(log(yi) ~ ti + ti2 + Iti)
mod.hw = hw(yi, seasonal = "add", damped = TRUE)
mod.nnar = nnetar(yi, lambda=0)
mod.nnar
q = 2
p = 2
s = 1
k = 1 + 2*(p+1)+ q*1 + q*s
yf = ts(y[(T-m+1):T], frequency = m)
tf = seq(T-m+1,T,1)
tf2 = tf ^ 2
tf3 = tf ^ 3
Iti = seasonaldummy(yf, m)
pr = mat.or.vec(length(tf), 6)
pr[,1] = predict(mod.cuadratico, data.frame(ti = tf, ti2 = tf2, Iti = Iti))
pr[,2] = predict(mod.cubico, data.frame(ti = tf, ti2 = tf2, ti3 = tf3, Iti = Iti))
pr[,3] = ts(predict(mod.exponencial_lineal, data.frame(ti = tf, It = I(Iti))),frequency = 12)
pr[,4] = ts(predict(mod.exponencial_cuadratico, data.frame(ti = tf, ti2 = tf2, It = I(Iti))),frequency = 12)
pr[,5] = ts(fitted(mod.hw), frequency = 12)[501:512]
pr[,6] = as.numeric(fitted(mod.nnar))[501:512]
A=rbind(
accuracy(ts(pr[,1],frequency=12),yf),
accuracy(ts(pr[,2],frequency=12),yf),
accuracy(ts(pr[,3],frequency=12),yf),
accuracy(ts(pr[,4],frequency=12),yf),
accuracy(ts(pr[,5],frequency=12),yf),
accuracy(ts(pr[,6],frequency=12),yf))
rownames(A) = c("Cuad","Cúb", "Exp.lin", "Exp.cuad", "HW", "Red")
(A)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(0, 2))
lines(tf, pr[,1], col='blue')
lines(tf, pr[,2], col='magenta')
lines(tf, pr[,3], col='green')
lines(tf, pr[,4], col='red')
lines(tf, pr[,5], col='orange')
lines(tf, pr[,6], col='purple')
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, pr[,1], col='blue')
lines(tf, pr[,2], col='magenta')
lines(tf, pr[,3], col='green')
lines(tf, pr[,4], col='red')
lines(tf, pr[,5], col='orange')
lines(tf, pr[,6], col='purple')
# Parámetros.
m = 12
T = length(y)
yi = ts(y[1:(T-m)], frequency = m)
yf = ts(y[(T-m+1):T], frequency = m)
lnyi = log(yi)
ti = seq(1,length(yi))
ti2 = ti^2
ti3 = ti^3
tf = seq(T-m+1,T)
tf2 = tf*tf
tf3 = tf ^ 3
Iti = seasonaldummy(yi)
Itf = seasonaldummy(yi, m)
Xti.lin = cbind(rep(1, length(yi)), ti, Iti)
Xti.cuad = cbind(rep(1, length(yi)), ti, ti2, Iti)
Xtf.lin = cbind(rep(1, m), tf, Itf)
Xtf.cuad = cbind(rep(1, m), tf, tf2, Itf)
# Modelos.
mod.cuadratico = lm(yi ~ ti + ti2 + Iti)
mod.cubico = lm(yi ~ ti + ti2 + ti3 + Iti)
mod.loglineali = lm(lnyi ~ ti + Iti)
Dsi.lin = data.frame(yi, Xti.lin)
theta.0i.lin = coef(mod.loglineali)
mod.exponencial_lineal = nls(yi ~ exp(Xti.lin%*%theta), data = Dsi.lin, start = list(theta = theta.0i.lin))
mod.logcuadraticoi = lm(lnyi ~ ti + ti2 + Iti)
Dsi.cuad = data.frame(yi, Xti.cuad)
theta.0i.cuad = coef(mod.logcuadraticoi)
mod.exponencial_cuadratico = nls(yi ~ exp(Xti.cuad%*%theta), data = Dsi.cuad, start = list(theta = theta.0i.cuad))
mod.hw = hw(yi, seasonal = "add", damped = TRUE)
mod.nnar = nnetar(yi, lambda=0)
mod.nnar
q = 2
p = 2
s = 1
k = 1 + 2*(p+1)+ q*1 + q*s
pr = mat.or.vec(length(tf), 6)
pr[,1] = predict(mod.cuadratico, data.frame(ti = tf, ti2 = tf2, Iti = I(Itf)))
pr[,2] = predict(mod.cubico, data.frame(ti = tf, ti2 = tf2, ti3 = tf3, Iti = I(Itf)))
pr[,3] = predict(mod.exponencial_lineal, data.frame(Xti.lin = I(Xtf.lin)))
pr[,4] = predict(mod.exponencial_cuadratico, data.frame(Xti.cuad = I(Xtf.cuad)))
pr[,5] = as.numeric(forecast(mod.hw,h=m)$mean)
pr[,6] = as.numeric(forecast(mod.nnar,h=m)$mean)
#par(mfrow=c(1,1))
#plot(tf, yf, type = 'o', lwd=2, ylim = c(1.3, 1.8))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.3, 1.8))
lines(tf, pr[,1], col='blue')
lines(tf, pr[,2], col='magenta')
lines(tf, pr[,3], col='green')
lines(tf, pr[,4], col='red')
lines(tf, pr[,5], col='orange')
lines(tf, pr[,6], col='purple')
legend(x = 513, y = 1.5,
c("Cuad","Cúb", "Exp.lin", "Exp.cuad", "HW", "Red"),
pch = c(1, 3, 5),
cex=0.75, col=c("blue","magenta","green", "red", "orange", "purple"))
Ity = seasonaldummy(yi, m)
y_estimado = predict(mod.cuadratico, data.frame(ti = tf, ti2 = tf2, Iti = Iti))
y_estimado = predict(mod.cuadratico, data.frame(ti = tf, ti2 = tf2, Iti = Itf))
m = 12
T = length(y)
yi = ts(y[1:(T-m)], frequency = m)
yf = ts(y[(T-m+1):T], frequency = m)
lnyi = log(yi)
ti = seq(1,length(yi))
ti2 = ti^2
ti3 = ti^3
tf = seq(T-m+1,T)
tf2 = tf*tf
tf3 = tf ^ 3
Iti = seasonaldummy(yi)
Itf = seasonaldummy(yi, m)
Xti.lin = cbind(rep(1, length(yi)), ti, Iti)
Xti.cuad = cbind(rep(1, length(yi)), ti, ti2, Iti)
Xtf.lin = cbind(rep(1, m), tf, Itf)
Xtf.cuad = cbind(rep(1, m), tf, tf2, Itf)
mod.cuadratico = lm(yi ~ ti + ti2 + Iti)
residuos <- residuals(mod.cuadratico)
Box.test(residuos,lag = 36, type= "Ljung-Box")
modelo_sarima <- arima(residuos, order = c(2, 0, 0), seasonal = list(order = c(3, 0, 2), period = 12, include.mean = TRUE))
residuos2 = residuals(modelo_sarima)
Box.test(residuos2,lag = 36, type= "Ljung-Box")
y_estimado = predict(mod.cuadratico, data.frame(ti = tf, ti2 = tf2, Iti = Itf))
e_estimado = predict(modelo_sarima, n.ahead=12)$pred
y_total = y_estimado + e_estimado$mean
y_total = y_estimado + e_estimado$pred
y_total = y_estimado + e_estimado
accuracy(ts(y_total, frequency=12), yf)
accuracy(ts(y_estimado, frequency=12), yf)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
y_estimado = predict(mod.cuadratico, data.frame(ti = tf, ti2 = tf2, Iti = I(Itf)))
e_estimado = predict(modelo_sarima, n.ahead=12)$pred
y_total = y_estimado + e_estimado
accuracy(ts(y_total, frequency=12), yf)
accuracy(ts(y_estimado, frequency=12), yf)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
setwd("~/Documents/unal/tecnicas-de-pronostico/trabajo-1/")
# Cargar librerías
library(readxl)
library(pastecs)
library(forecast)
library(xtable)
library(strucchange)
source("medidas.r")
source("medidas.hw.r")
datos <- read_excel("precio.naranja.usa.ciudades.xls", skip = 10)
colnames(datos)[1] ="fecha"
colnames(datos)[2] ="precio"
np = nrow(datos)
#-----------------------convierte fecha a formato de R
fechas = as.Date(datos$fecha,format="%Y/%m/%d")
ejex.mes = seq(fechas[1],fechas[np], "months")
ejex.anio = seq(fechas[1],fechas[np],"years")
plot(
fechas,
datos$precio,
xaxt="n",
panel.first = grid(),
type='l',
lwd=2,
ylab='Costo promedio ($USD)'
)
axis.Date(1, at=ejex.mes, format="%m/%y")
axis.Date(1, at=ejex.anio, labels = FALSE, tcl = -0.2)
n = length(datos$precio)
x = seq(1,n)
datos.precio_imputado = regul(
x,
y=datos$precio,
xmin=min(x),
n=length(x),
units="months",
deltat=1,
methods="spline",
rule=2,
f=0.5,
periodic=FALSE,
window=(max(x) - min(x))/(n - 1),
split=100,
specs=NULL
)
layout(1:2)
ts.plot(datos$precio, ylab="original")
ts.plot(datos.precio_imputado$y$Series,ylab="imputada")
m = 12
y = ts(datos.precio_imputado$y$Series, frequency=12)
T = length(y)
yi = ts(y[1:(T-m)], frequency = m)
yf = ts(y[(T-m+1):T], frequency = m)
ti = seq(1,length(yi))
ti2 = ti^2
tf = seq(T-m+1,T)
tf2 = tf*tf
Iti = seasonaldummy(yi)
Itf = seasonaldummy(yi, m)
mod.cuadratico = lm(yi ~ ti + ti2 + Iti)
residuos <- residuals(mod.cuadratico)
# Gráfica de la serie de residuos
ts.plot(residuos)
ts.plot(residuos, h=0)
residuos$mean
mean(residuos)
abline(h=0, color="red", lty=2)
abline(h=0, col="red", lty=2)
# ACF de los residuos
TSA::acf(residuos, 36, ci.type = "ma", drop.lag.0 = TRUE)
Box.test(residuos,lag = 36, type= "Ljung-Box")
plot(residuos2)
Box.test(residuos,lag = 36, type= "Ljung-Box")
modelo_sarima <- arima(residuos, order = c(2, 0, 0), seasonal = list(order = c(3, 0, 2), period = 12, include.mean = TRUE))
summary(modelo_arima)
summary(modelo_sarima)
coeftest(modelo_sarima)
residuos2 = residuals(modelo_sarima)
TSA::acf(residuos2, 36, ci.type = "ma", drop.lag.0 = TRUE)
Box.test(residuos2,lag = 36, type= "Ljung-Box")
plot(residuos2)
acf(residuos2)
pacf(residuos2)
qqplot(qnorm(ppoints(length(residuos2)), mean = mean(residuos2), sd = sd(residuos2)), residuos2,
main = "Gráfico cuantil-cuantil de los residuos")
abline(0, 1, col = "red")
plot(residuos2)
acf(residuos2)
pacf(residuos2)
plot(residuos2)
plot(residuos2, type="p")
plot(residuos2)
acf(residuos2)
pacf(residuos2)
qqplot(qnorm(ppoints(length(residuos2)), mean = mean(residuos2), sd = sd(residuos2)), residuos2,
main = "Gráfico cuantil-cuantil de los residuos")
plot(residuos2)
residuos_sarima = residuals(modelo_sarima)
TSA::acf(residuos_sarima, 36, ci.type = "ma", drop.lag.0 = TRUE)
Box.test(residuos_sarima,lag = 36, type= "Ljung-Box")
plot(residuos_sarima)
acf(residuos_sarima)
pacf(residuos_sarima)
residuos_sarma = residuals(modelo_sarima)
TSA::acf(residuos_sarma, 36, ci.type = "ma", drop.lag.0 = TRUE)
Box.test(residuos_sarma,lag = 36, type= "Ljung-Box")
plot(residuos_sarma)
acf(residuos_sarma)
pacf(residuos_sarma)
qqplot(qnorm(ppoints(length(residuos_sarma)), mean = mean(residuos_sarma), sd = sd(residuos_sarma)), residuos_sarma,
main = "Gráfico cuantil-cuantil de los residuos")
abline(0, 1, col = "red")
y_estimado = predict(mod.cuadratico, data.frame(ti = tf, ti2 = tf2, Iti = I(Itf)))
e_estimado = predict(modelo_sarima, n.ahead=12)$pred
y_total = y_estimado + e_estimado
accuracy(ts(y_total, frequency=12), yf)
accuracy(ts(y_estimado, frequency=12), yf)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
modelo_auto_arima <- auto.arima(residuos, stationary = TRUE, seasonal = TRUE, ic = "aicc")
summary(modelo_auto_arima)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
legend(x = 513, y = 1.5,
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
legend(
x = 513,
y = 1.5,
c("Serie","Cuad", "Cuad+SARMA"),
pch = c(1, 3, 5),
cex=0.75, col=c("blue","magenta","green", "red", "orange", "purple")
)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
legend(
x = 513,
y = 1.5,
c("Serie","Cuad", "Cuad+SARMA"),
pch = c(1, 3, 5),
cex=0.75, col=c("black","red","green")
)
legend(
x = 0,
y = 1.5,
c("Serie","Cuad", "Cuad+SARMA"),
pch = c(1, 3, 5),
cex=0.75, col=c("black","red","green")
)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
legend(
x = 0,
y = 1.5,
c("Serie","Cuad", "Cuad+SARMA"),
pch = c(1, 3, 5),
cex=0.75, col=c("black","red","green")
)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
legend(
x = 513,
y = 100.5,
c("Serie","Cuad", "Cuad+SARMA"),
pch = c(1, 3, 5),
cex=0.75, col=c("black","red","green")
)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
legend(
x = 513,
y = 100.5,
c("Serie","Cuad", "Cuad+SARMA"),
pch = c(1, 3, 5),
cex=0.75, col=c("black","red","green")
)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
legend(
x = 513,
y = 50,
c("Serie","Cuad", "Cuad+SARMA"),
pch = c(1, 3, 5),
cex=0.75, col=c("black","red","green")
)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
legend(
x = 513,
y = 1,
c("Serie","Cuad", "Cuad+SARMA"),
pch = c(1, 3, 5),
cex=0.75, col=c("black","red","green")
)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
legend(
x = 513,
y = 1.5,
c("Serie","Cuad", "Cuad+SARMA"),
pch = c(1, 3, 5),
cex=0.75, col=c("black","red","green")
)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(0, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
legend(
x = 513,
y = 1.5,
c("Serie","Cuad", "Cuad+SARMA"),
pch = c(1, 3, 5),
cex=0.75, col=c("black","red","green")
)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(0, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
legend(
x = 513,
y = 0,
c("Serie","Cuad", "Cuad+SARMA"),
pch = c(1, 3, 5),
cex=0.75, col=c("black","red","green")
)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(0, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
legend(
x = 513,
y = 1,
c("Serie","Cuad", "Cuad+SARMA"),
pch = c(1, 3, 5),
cex=0.75, col=c("black","red","green")
)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(0, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
legend(
x = 513,
y = 1.5,
c("Serie","Cuad", "Cuad+SARMA"),
pch = c(1, 3, 5),
cex=0.75, col=c("black","red","green")
)
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2))
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2), xlab = "Tiempo", ylab = "Precio estimado")
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='green')
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2), xlab = "Tiempo", ylab = "Precio estimado")
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='darkblue')
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.2, 2), xlab = "Tiempo", ylab = "Precio estimado")
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='magenta')
accuracy(ts(y_total, frequency=12), yf)
accuracy(ts(y_estimado, frequency=12), yf)
accuracy(ts(y_total, frequency=12), yf)
accuracy(ts(y_estimado, frequency=12), yf)
TSA::acf(residuos_sarma, 36, ci.type = "ma", drop.lag.0 = TRUE)
modelo_sarima <- arima(residuos, order = c(2, 0, 0))
residuos_sarma = residuals(modelo_sarima)
TSA::acf(residuos_sarma, 36, ci.type = "ma", drop.lag.0 = TRUE)
Box.test(residuos_sarma,lag = 36, type= "Ljung-Box")
residuos_ar = residuals(modelo_sarima)
TSA::acf(residuos_ar, 36, ci.type = "ma", drop.lag.0 = TRUE)
Box.test(residuos_ar,lag = 36, type= "Ljung-Box")
par(mfrow=c(1,1))
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.4, 1.7), xlab = "Tiempo", ylab = "Precio estimado")
plot(tf, yf, type = 'o', lwd=2, ylim = c(1.4, 1.8), xlab = "Tiempo", ylab = "Precio estimado")
lines(tf, yf, col='black')
lines(tf, y_estimado, col='red')
lines(tf, y_total, col='magenta')
#TRABAJO # 3 TÉCNICAS DE PRONOSTICOS
setwd("~/Documents/unal/tecnicas-de-pronostico/trabajo-3/")
library(readxl)
library(pastecs)
library(forecast)
library(xtable)
library(strucchange)
require(TSA)
require(dynlm)
require(lmtest)
require(timsac)
require(xts)
source("medidas.r")
source("medidas.yest.r")
source("medidas.hw.r")
datos <- read_excel("precio.naranja.usa.ciudades.xls", skip = 10)
colnames(datos)[1] ="fecha"
colnames(datos)[2] ="precio"
# Imputación de valores faltantes.
n = length(datos$precio)
x = seq(1,n)
datos.precio_imputado = regul(
x,
y=datos$precio,
xmin=min(x),
n=length(x),
units="months",
deltat=1,
methods="spline",
rule=2,
f=0.5,
periodic=FALSE,
window=(max(x) - min(x))/(n - 1),
split=100,
specs=NULL
)
# Definiendo la serie de tiempo.
y = ts(datos.precio_imputado$y$Series, frequency=12)
m = 12
T = length(y)
yi = ts(y[1:(T-m)], frequency = m)
yf = ts(y[(T-m+1):T], frequency = m)
